# This workflow will install Python dependencies, performs linting and commit the changes

name: VBA-Linter

on:
  push:
    branches: [ "ascii" ]
  pull_request:
    branches: [ "ascii" ]

permissions:
  contents: write

jobs:
  linter:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Install other dependencies
      run: |
        # REF: https://gist.github.com/sixman9/4082576
        # Install unix2dos and dos2unix on Ubuntu Linux
        # unix2dos and dos2unix are replace with todos and fromdos
        # We'll install those and then alias them
        sudo apt-get install tofrodos
        sudo ln -s /usr/bin/fromdos /usr/bin/dos2unix
        sudo ln -s /usr/bin/todos /usr/bin/unix2dos
        # TODO: Use Cache for APT: https://github.com/marketplace/actions/cache-apt-packages
    - name: Lint Python with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: VBA Linter
      run: |
        python './.github/workflows/vba-linter/vba-linter.py'
    - name: Update push content
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com

        # Add .bas files if they exist
        git add *.bas || true

        # Add .cls files if they exist
        git add *.cls || true

        # Add .frm files if they exist
        git add *.frm || true
        git status
        if [ -n "$(git diff --cached --exit-code)" ]; then
          echo "Changes detected"
          branch_name="vba-linter-changes-$(git rev-parse --short HEAD)"
          git checkout -b $branch_name
          git commit -m "VBA Linter"
          git push --set-upstream origin $branch_name
        else
          echo "No changes to commit"
        fi
